import numpy as np

def C(n1,n2):
  return np.factorial(n1)/(np.factorial(n2)*np.factorial(n1-n2))
  
""""""""""""""""Discrete Distributions"""""""""""""""""""

##########################################################################

"Uniform Distribution"

a1 = input("What is the smallest endpoint value?: ")
b1 = input("What is the largest endpoint value?: ")             # b1<a1

def uniform(a,b):
  return 1/(b-a)
mean = (a+b)/2
variance = ((b-a)**2)/12

print("The probability is: " + str(uniform(a,b)))
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"Binomial Distribution"

n1 = input("How many independent trials?: ")
p1 = input("What is the probability of event?: ")
x1 = input("How many events in n trials:? ")        #(x = 0,1,2,...,n)

def binomial(n, p, x):
  return C(n,x)*(p**(x))*((1-p)**(n-x))
mean = n1*p1
variance = (n1*p1)*(1-p1)

print("The probability is: " + str(binomial(n1,p1,x1)))
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"Geometric Distribution"

y = input("Number of nonevents that occur before the first event?: ")   #(y = 0,1,2,...)
x = input("Number of trials to produce one event:? ")                   #(x = 1,2,3,...)
p = input("What is the probability of event?: ")

def geometric1(x, p):
  if x = 0:
    return 0
  else:
    return p*[(1-p)**(x-1)]
mean = 1/p
variance = (1-p)/p**2
 
 
def geometric2(y, p):
  return p*[(1-p)**(y)]
mean = (1-p)/p
varaiance = (1-p)/p**2

print(str(geometric1(y,p)
print(str(geometric1(y,p)))
print(mean)
print(variance)
  
######################################################################### 

"Hypergeometric Distribution"

N1 = input("Number of events in a population?: ")
N2 = input("Number of non-events in a population?: ")
N = N1 + N2    #Population size
n = input("Sample size?: ")
x = input("Number of events in the sample size?: ")              #(max(0,n-(N+N1))<=x<=min(n,N1)

def hypergeometric(N1, N2, n, x):
  return (C(N1, x)*C(N2, n-x))/C(N,n)
mean = n*(N1/N)
variance = n*((N-n)/(N-1))*(N1/N)*(N2/N)

print("The probability is: " + str(hypergeometric(N1, N2, n, x)))
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))  

########################################################################

"Poisson Distribution"

lambda1 = input("What is the constant rate of occurence?: )                  lambda > 0
x1 = input("Number of events in that constant rate of occurence?: ")        #(x = 0,1,2,...)

def poisson(lambda1, x):
  return ((np.exp**(-lambda1))*(lambda1**x))/np.factorial(x)
mean = lambda1
variance = lambda1

print("The probability is: " + str(poisson(lambda1, x1)))
print("The mean is: " + str(mean))
print("The variance is: " + str(variance)) 
