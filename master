import numpy as np

# Reference Page for distributions: 
# https://support.minitab.com/en-us/minitab/18/help-and-how-to/probability-distributions-and-random-data/how-to/probability-distributions/methods-and-formulas/methods-and-formulas/

def C(n1,n2):
  return np.factorial(n1)/(np.factorial(n2)*np.factorial(n1-n2))
  
################################################################################################################
################################################################################################################
  
""""""""""""""""Discrete Distributions"""""""""""""""""""

################################################################################################################
################################################################################################################

"Uniform Distribution"""

def uniform_discrete(a,b):
  return 1/(b-a)                            # b > a

"""Inputs for variables"""
a1 = input("What is the smallest endpoint value?: ")
b1 = input("What is the largest endpoint value?: ")            

mean = (a1+b1)/2
variance = ((b1-a1)**2)/12

print("\nThe probability is: " + str(uniform_discrete(a1,b1)))
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"""Binomial Distribution"""

def binomial(n, p, x):
  return C(n,x)*(p**(x))*((1-p)**(n-x))

"""Inputs for variables"""
n1 = input("How many independent trials?: ")
p1 = input("What is the probability of event?: ")
e = input("Is P(X = x) (type: e), Is P(X ≤ x) (type: l), Is P(X ≥ x) (type: g)?: ")

if e == 'e':
  x1 = input("How many events (x) in the " + str(n1) + " independent trials?: ")                     #(x = 0,1,2,...,n)
  print("\nThe probability is: " + str(binomial(n1, p1, x1)))

# the CDF (Cumulative Distribution Function) solution
else:             
  probability_list = []
  lower_endpoint = int(input("Least number of events?: "))
  upper_endpoint = int(input("Most number of events?: "))
  
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = binomial(n1,p1,i)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  
mean = n1*p1
variance = (n1*p1)*(1-p1)
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"""Negative Binomial Distribution"""

def negative_binomial1(r, x, p):
  return (C(x-1,r-1))*(p**r)*((1-p)**(x-r))

def negative_binomial2(r, y, p):
  return (C(y+r-1,r-1))*(p**r)*((1-p)**(y))
  
"""Inputs for variables"""
p1 = input("What is the probability of event?: ")
r1 = input("Number of events you want to produce?: ")    
e = input("Is P(X = x) (type: e), Is P(X ≤ x) (type: l), Is P(X ≥ x) (type: g)?: ")
Q = input("If question is: Number of trials to produce r events? (x), or is: Number of non-events that occur before you observe the first r event? (y): ")

if e == 'e' and Q == 'x':
  x1 = input("Number of trials to produce r events?: ")                                 #(x = r,r+1,r+2,...)
  print("\nThe probability is: " + str(negative_binomial1(r1, x1, p1)))
  mean = r1/p1
  variance = (r1*(1-p1))/p1**2


if e == 'e' and Q == 'y':
  y1 = input("Number of non-events that occur before you observe r events?: ")        #(y = 0,1,2,...)
  print("\nThe probability is: " + str(negative_binomial2(r1, x1, p1)))
  mean = (r1*(1-p1))/p1
  variance = (r1*(1-p1))/p1**2
  
  
# the CDF (Cumulative Distribution Function) solution  
if (e == 'l' or e == 'g') and Q == 'x':
  probability_list = []
  lower_endpoint = int(input("Least number of events? (x > 0): "))                             
  upper_endpoint = int(input("Most number of events? (x): "))
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = negative_binomial1(r1, i, p1)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  mean = r1/p1
  variance = (r1*(1-p1))/p1**2
  
  
# the CDF (Cumulative Distribution Function) solution  
if (e == 'l' or e == 'g') and Q == 'y':
  probability_list = []
  lower_endpoint = int(input("Least number of events?: "))
  upper_endpoint = int(input("Most number of events?: "))
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = negative_binomial2(r1, i, p1)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  mean = (r1*(1-p1))/p1
  variance = (r1*(1-p1))/p1**2 

print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"""Geometric Distribution"""

def geometric1(x, p):
  return p*((1-p)**(x-1))

def geometric2(y, p):
  return p*((1-p)**(y))

"""Inputs for variables"""
p = input("What is the probability of event?: ")
e = input("Is P(X = x) (type: e), Is P(X ≤ x) (type: l), Is P(X ≥ x) (type: g)?: ")
Q = input("If question is: Number of trials to produce one event? (x), or is: Number of non-events that occur before you observe the first event? (y): ")

if e == 'e' and Q == 'x':
  x = input("Number of trials to produce one event?: ")                                   #(x = 1,2,3,...)
  print("\nThe probability is: " + str(geometric1(y,p)))
  mean = 1/p
  variance = (1-p)/p**2
  
  
if e == 'e' and Q == 'y':
  y = input("Number of non-events that occur before you observe the first event?: ")      #(y = 0,1,2,...)
  print("\nThe probability is: " + str(geometric2(y,p)))
  mean = (1-p)/p
  varaiance = (1-p)/p**2
  
  
# the CDF (Cumulative Distribution Function) solution  
if (e == 'l' or e == 'g') and Q == 'x':
  probability_list = []
  lower_endpoint = int(input("Least number of events? (x > 0): "))                             
  upper_endpoint = int(input("Most number of events? (x): "))
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = geometric1(i,p)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  mean = 1/p
  variance = (1-p)/p**2
  
  
# the CDF (Cumulative Distribution Function) solution  
if (e == 'l' or e == 'g') and Q == 'y':
  probability_list = []
  lower_endpoint = int(input("Least number of events?: "))
  upper_endpoint = int(input("Most number of events?: "))
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = geometric2(i,p)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
    
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  mean = (1-p)/p
  variance = (1-p)/p**2

print("The mean is: " + str(mean))
print("The variance is: " + str(variance))
  
######################################################################### 

"""Hypergeometric Distribution"""

def hypergeometric(N1, N2, n, x):
  return (C(N1, x)*C(N2, n-x))/C(N,n)

"""Inputs for variables"""
N = input("Population size?: ")                                       # Population size
N1 = input("Number of events in a population?: ")
N2 = N-N1                                                             # Number of non-events in a population 
n = input("Sample size?: ")
e = input("Is P(X = x) (type: e), Is P(X ≤ x) (type: l), Is P(X ≥ x) (type: g)?: ")

if e == 'e':
  x = input("Number of events within the sample size?: ")              # (max(0,n-(N+N1)) <= x <= min(n,N1)
  print("\nThe probability is: " + str(hypergeometric(N1, N2, n, x)))

# the CDF (Cumulative Distribution Function) solution
else:    
  probability_list = []
  lower_endpoint = int(input("Least number of events within the sample size?: "))
  upper_endpoint = int(input("Most number of events within the sample size?: "))
  
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = hypergeometric(N1, N2, n, i)
    probability_list.append(p_x)
    
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  if e == 'l':
    print("\nThe probability is: " + str(sum(probability_list)))

mean = n*(N1/N)
variance = n*((N-n)/(N-1))*(N1/N)*(N2/N)
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))  

########################################################################

"""Poisson Distribution"""

def poisson(lambda1, x):
  return ((np.exp**(-lambda1))*(lambda1**x))/np.factorial(x)

"""Inputs for variables"""
lambda1 = input("What is the constant rate of occurence?: )                 # lambda > 0
e = input("Is P(X = x) (type: e), Is P(X ≤ x) (type: l), Is P(X ≥ x) (type: g)?: ")

if e == 'e':
  x1 = input("Number of events (x) in that constant rate of occurence?: ")        #(x = 0,1,2,...)
  print("\nThe probability is: " + str(poisson(lambda1, x1)))

# the CDF (Cumulative Distribution Function) solution
else:        
  probability_list = []
  lower_endpoint = int(input("Least number of events?: "))
  upper_endpoint = int(input("Most number of events?: "))
  
  for i in range(lower_endpoint,upper_endpoint+1):
    p_x = poisson(lambda1, i)
    probability_list.append(p_x)
    
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  if e == 'l':
    print("\nThe probability is: " + str(sum(probability_list)))

mean = lambda1
variance = lambda1
print("The mean is: " + str(mean))
print("The variance is: " + str(variance)) 


################################################################################################################
################################################################################################################

""""""""""""""""Continuous Distributions"""""""""""""""""""

################################################################################################################
################################################################################################################

"""Uniform Distribution"""

def uniform_cont(x, a, b):
  return (x - a)/(b - a)

"""Inputs for variables"""
e = input("Is (X ≤ x) (type: l), or P(a ≤ X ≤ b) (type: b), or P(X ≥ x) (type: g)?: ")
lower_endpoint = int(input("Lower endpoint of uniform range (a)?: "))
upper_endpoint = int(input("Upper endpoint of uniform range (b)?: "))

# the CDF (Cumulative Distribution Function) solution
if e == 'b':
  lower_endpoint_x = int(input("Lower endpoint of x time range?: "))
  upper_endpoint_x = int(input("Upper endpoint of x time range?: "))
  p_x = uniform_cont(upper_endpoint_x, lower_endpoint, upper_endpoint) - uniform_cont(lower_endpoint_x, lower_endpoint, upper_endpoint)
  print("\nThe probability is: " + str(p_x))
  
if e == 'g':
  x1 = input("What is the time we need to wait before a given event occurs?: ")        # (x > 0)
  print("\nThe probability is: " + str(1 - uniform_cont(x1, lower_endpoint, upper_endpoint)))
  
if e == 'l':  
  x1 = input("What is the time we need to wait before a given event occurs?: ")        # (x > 0)
  print("\nThe probability is: " + str(uniform_cont(x1, lower_endpoint, upper_endpoint)))
  
mean = (lower_endpoint + upper_endpoint)/2
variance = ((upper_endpoint - lower_endpoint)**2)/12
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))   
  
#########################################################################

"""Exponential Distribution"""

def exponential(lambda1, x):
  return (1 - np.exp((-lambda1)*x))

"""Inputs for variables"""
lambda1 = input("What is the constant rate of occurence (lambda)?: )                 # lambda > 0
e = input("Is P(X = x) (type: e), or P(a ≤ X ≤ b) (type: b), or P(X ≥ x) (type: g)?: ")

if e == 'e':
  x1 = input("What is the time we need to wait before a given event occurs?: ")        # (x > 0)
  print("\nThe probability is: " + str(exponential(lambda1, x1)))

# the CDF (Cumulative Distribution Function) solution
else:        
  if e == 'g':
    lower_endpoint = 0
    upper_endpoint = int(input("Least amount of time?: "))
    p_x = exponential(lambda1, upper_endpoint) - exponential(lambda1, lower_endpoint)
    print("\nThe probability is: " + str(1 - p_x))
    
  if e == 'b':
    lower_endpoint = int(input("Least amount of time (a)?: "))
    upper_endpoint = int(input("Most amount of time (b)?: "))
    p_x = exponential(lambda1, upper_endpoint) - exponential(lambda1, lower_endpoint)
    print("\nThe probability is: " + str(p_x))

mean = 1/lambda1
variance = 1/lambda1**2
print("The mean is: " + str(mean))
print("The variance is: " + str(variance)) 


######################################################################### 

"""Normal Distribution"""

######################################################################### 

"""Gamma Distribution"""
