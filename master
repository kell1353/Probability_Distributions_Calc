import numpy as np

def C(n1,n2):
  return np.factorial(n1)/(np.factorial(n2)*np.factorial(n1-n2))
  
""""""""""""""""Discrete Distributions"""""""""""""""""""

##########################################################################

"Uniform Distribution"

def uniform(a,b):
  return 1/(b-a)                            # b > a

"Inputs for variables"
a1 = input("What is the smallest endpoint value?: ")
b1 = input("What is the largest endpoint value?: ")            

mean = (a1+b1)/2
variance = ((b1-a1)**2)/12

print("\nThe probability is: " + str(uniform(a1,b1)))
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"Binomial Distribution"

def binomial(n, p, x):
  return C(n,x)*(p**(x))*((1-p)**(n-x))

"Inputs for variables"
n1 = input("How many independent trials?: ")
p1 = input("What is the probability of event?: ")
e = input("Is P(X=x) (type: e), Is P(X≤x) (type: l), Is P(X≥x) (type: g)?: ")

if e == 'e':
  x1 = input("How many events (x) in the " + str(n1) + " independent trials?: ")                     #(x = 0,1,2,...,n)
  print("\nThe probability is: " + str(binomial(n1, p1, x1)))

else:             # the CDF (Cumulative Distribution Function) solution
  probability_list = []
  first_value = int(input("Least number of events?: "))
  last_value = int(input("Most number of events?: "))
  
  for i in range(first_value,last_value+1):
    p_x = binomial(n1,p1,i)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  
mean = n1*p1
variance = (n1*p1)*(1-p1)
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))

##########################################################################

"Negative Binomial Distribution"

def negative_binomial1(r, x, p):
  return (C(x-1,r-1))*(p**r)*((1-p)**(x-r))

def negative_binomial2(r, y, p):
  return (C(y+r-1,r-1))*(p**r)*((1-p)**(y))

"Inputs for variables"
r1 = input("Number of events ?: ")    
x1 = input("Number of trials to produce r events?: ")                               #(x = r,r+1,r+2,...)
y1 = input("Number of non-events that occur before you observe one events?: ")      #(y = 0,1,2,...)
p1 = input("What is the probability of event?: ")

print(str(negative_binomial1(r1, x1, p1)))
mean = r1/p1
variance = (r1*(1-p1))/p1**2

print(str(negative_binomial2(r1, y1, p1)))
mean = (r1*(1-p1))/p1
variance = (r1*(1-p1))/p1**2

print(mean)
print(variance)

##########################################################################

"Geometric Distribution"

def geometric1(x, p):
    return p*((1-p)**(x-1))

 def geometric2(y, p):
  return p*((1-p)**(y))

"Inputs for variables"
p = input("What is the probability of event?: ")
e = input("Is P(X=x) (type: e), Is P(X≤x) (type: l), Is P(X≥x) (type: g)?: ")
Q = input("If question is: Number of trials to produce one event? (x), or is: Number of non-events that occur before you observe the first event? (y): ")

if e == 'e' and Q == 'x':
  x = input("Number of trials to produce one event?: ")                                   #(x = 1,2,3,...)
  print(str(geometric1(x,p)))
  mean = 1/p
  variance = (1-p)/p**2
  
  
if e == 'e' and Q == 'y':
  y = input("Number of non-events that occur before you observe the first event?: ")      #(y = 0,1,2,...)
  print(str(geometric2(y,p)))
  mean = (1-p)/p
  varaiance = (1-p)/p**2
  
  
# the CDF (Cumulative Distribution Function) solution  
if (e == 'l' or e == 'g') and Q == 'x':
  probability_list = []
  first_value = int(input("Least number of events? (x > 0): "))                             
  last_value = int(input("Most number of events?: "))
  for i in range(first_value,last_value+1):
    p_x = geometric1(i,p)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  mean = 1/p
  variance = (1-p)/p**2
  
  
# the CDF (Cumulative Distribution Function) solution  
if (e == 'l' or e == 'g') and Q == 'y':
  probability_list = []
  first_value = int(input("Least number of events?: "))
  last_value = int(input("Most number of events?: "))
  for i in range(first_value,last_value+1):
    p_x = geometric2(i,p)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))
  mean = (1-p)/p
  variance = (1-p)/p**2

print("The mean is: " + str(mean))
print("The variance is: " + str(variance))
  
######################################################################### 

"Hypergeometric Distribution"

def hypergeometric(N1, N2, n, x):
  return (C(N1, x)*C(N2, n-x))/C(N,n)

"Inputs for variables"
N = input("Population size?: ")                                       # Population size
N1 = input("Number of events in a population?: ")
N2 = N-N1                                                             # Number of non-events in a population 
n = input("Sample size?: ")
e = input("Is P(X=x) (type: e), Is P(X≤x) (type: l), Is P(X≥x) (type: g)?: ")

if e == 'e':
  x = input("Number of events within the sample size?: ")              # (max(0,n-(N+N1)) <= x <= min(n,N1)
  print("\nThe probability is: " + str(hypergeometric(N1, N2, n, x)))

else:    # the CDF (Cumulative Distribution Function) solution
  probability_list = []
  first_value = int(input("Least number of events within the sample size?: "))
  last_value = int(input("Most number of events within the sample size?: "))
  
  for i in range(first_value,last_value+1):
    p_x = hypergeometric(N1, N2, n, i)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))

mean = n*(N1/N)
variance = n*((N-n)/(N-1))*(N1/N)*(N2/N)
print("The mean is: " + str(mean))
print("The variance is: " + str(variance))  

########################################################################

"Poisson Distribution"

def poisson(lambda1, x):
  return ((np.exp**(-lambda1))*(lambda1**x))/np.factorial(x)

"Inputs for variables"
lambda1 = input("What is the constant rate of occurence?: )                 # lambda > 0
e = input("Is P(X=x) (type: e), Is P(X≤x) (type: l), Is P(X≥x) (type: g)?: ")

if e == 'e':
  x1 = input("Number of events (x) in that constant rate of occurence?: ")        #(x = 0,1,2,...)
  print("\nThe probability is: " + str(poisson(lambda1, x1)))

else:        # the CDF (Cumulative Distribution Function) solution
  probability_list = []
  first_value = int(input("Least number of events?: "))
  last_value = int(input("Most number of events?: "))
  
  for i in range(first_value,last_value+1):
    p_x = poisson(lambda1, i)
    probability_list.append(p_x)
  if e == 'g':
    print("\nThe probability is: " + str(1 - sum(probability_list)))
  else:
    print("\nThe probability is: " + str(sum(probability_list)))

mean = lambda1
variance = lambda1
print("The mean is: " + str(mean))
print("The variance is: " + str(variance)) 
